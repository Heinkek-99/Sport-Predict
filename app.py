import streamlit as st
import pandas as pd
import joblib

# Titre de l'application
st.title("Application de Pr√©diction")

# Charger le mod√®le
model = joblib.load('best_ridge_model.pkl')

# Formulaire pour saisir les variables
st.sidebar.header("Saisissez les valeurs des variables")

# Variables num√©riques
age = st.sidebar.number_input("√Çge", min_value=0, max_value=120, value=30)
weight = st.sidebar.number_input("Poids (kg)", min_value=0.0, max_value=300.0, value=70.0)
height = st.sidebar.number_input("Taille (m)", min_value=0.0, max_value=3.0, value=1.75)
max_bpm = st.sidebar.number_input("BPM Maximum", min_value=0, max_value=300, value=180)
avg_bpm = st.sidebar.number_input("BPM Moyen", min_value=0, max_value=300, value=70)
resting_bpm = st.sidebar.number_input("BPM au repos", min_value=0, max_value=300, value=60)
session_duration = st.sidebar.number_input("Dur√©e de la session (heures)", min_value=0.0, max_value=24.0, value=1.0)
fat_percentage = st.sidebar.number_input("Pourcentage de graisse", min_value=0.0, max_value=100.0, value=20.0)
water_intake = st.sidebar.number_input("Consommation d'eau (litres)", min_value=0.0, max_value=20.0, value=2.0)
workout_frequency = st.sidebar.number_input("Fr√©quence d'entra√Ænement (jours/semaine)", min_value=0.0, max_value=7.0, value=3.0)
experience_level = st.sidebar.number_input("Niveau d'exp√©rience", min_value=0.0, max_value=10.0, value=5.0)
bmi = st.sidebar.number_input("IMC", min_value=0.0, max_value=100.0, value=22.0)

# Variables cat√©gorielles
gender_male = st.sidebar.selectbox("Genre (Homme = 1, Femme = 0)", [1, 0])
workout_type = st.sidebar.selectbox("Type d'entra√Ænement", ["HIIT", "Strength", "Yoga"])

# Encodage du type d'entra√Ænement
workout_type_hiit = 1 if workout_type == "HIIT" else 0
workout_type_strength = 1 if workout_type == "Strength" else 0
workout_type_yoga = 1 if workout_type == "Yoga" else 0

# Cr√©er un DataFrame avec les valeurs saisies
input_data = pd.DataFrame({
    'Age': [age],
    'Weight (kg)': [weight],
    'Height (m)': [height],
    'Max_BPM': [max_bpm],
    'Avg_BPM': [avg_bpm],
    'Resting_BPM': [resting_bpm],
    'Session_Duration (hours)': [session_duration],
    'Fat_Percentage': [fat_percentage],
    'Water_Intake (liters)': [water_intake],
    'Workout_Frequency (days/week)': [workout_frequency],
    'Experience_Level': [experience_level],
    'BMI': [bmi],
    'Gender_Male': [gender_male],
    'Workout_Type_HIIT': [workout_type_hiit],
    'Workout_Type_Strength': [workout_type_strength],
    'Workout_Type_Yoga': [workout_type_yoga]
})

# Bouton pour lancer la pr√©diction
if st.sidebar.button("Pr√©dire"):
    
    try:

    # Faire la pr√©diction
        prediction = model.predict(input_data)

    # Affichage du r√©sultat
        st.success(f"üî• **D√©pense calorique estim√©e :** {prediction[0]:.2f} kcal")
    #st.success(f"La pr√©diction est : {prediction[0]}")
    
    except Exception as e:
        st.error(f"‚ùå Une erreur s'est produite : {str(e)}")

# Section d'information
with st.expander("‚ÑπÔ∏è Comment utiliser cette application"):
    st.write("""
        Cette application pr√©dit la d√©pense calorique en fonction de vos donn√©es personnelles et de votre session sportive.
        - **√Çge** : Votre √¢ge en ann√©es.
        - **Poids** : Votre poids en kilogrammes.
        - **Taille** : Votre taille en centim√®tres.
        - **Dur√©e** : La dur√©e de votre session sportive en minutes.
        - **BPM** : Votre fr√©quence cardiaque moyenne pendant l'entra√Ænement.
        - **Temp√©rature** : La temp√©rature ambiante en degr√©s Celsius.
        - **Hydratation** : Cochez si vous √©tiez bien hydrat√© pendant l'entra√Ænement.
        - **% Graisse corporelle** : Votre pourcentage de graisse corporelle.
    """)